{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Creating a web manual using MkDocs","text":"<p>some intro about system...</p>"},{"location":"Convert%20Markdown%20to%20docx/","title":"Convert Markdown to Word with Pandoc","text":"<p>Let's look at how to convert Markdown (.md) files to Word (.docx) using Pandoc.</p> <p>Pandoc is a command-line tool and does not have a graphical interface.</p> <p>At first check if Pandoc is installed on your computer:</p> <ul> <li>Open a terminal and run the command: <code>brew info pandoc</code></li> </ul> <p>If the response says <code>not installed</code>, then Pandoc is not installed.</p>"},{"location":"Convert%20Markdown%20to%20docx/#install-pandoc","title":"Install Pandoc","text":"<p>To install Pandoc, run the following command in the terminal: <code>brew install pandoc</code></p> <p>Pandoc is written in Haskell and is installed via brew, not pip.  There is a Python wrapper called pypandoc, but it wraps Pandoc.</p>"},{"location":"Convert%20Markdown%20to%20docx/#basics-of-working-with-pandoc","title":"Basics of working with Pandoc","text":"<p>After installation, check Pandoc help to get acquainted with its capabilities: <code>pandoc --help</code></p> <p></p> <p>Command structure:</p> <ul> <li>Enter the command pandoc.</li> <li>Specify the required options (the list can be found in the help).</li> <li>Upload files for conversion.</li> </ul>"},{"location":"Convert%20Markdown%20to%20docx/#convert-markdown-files-to-word","title":"Convert Markdown files to Word","text":"<p>For example, we will convert Markdown files to Word.</p> <p>To perform the conversion, use the following command:</p> <p><code>pandoc -f markdown -t docx -o &lt;path_to_result.docx&gt; &lt;path_to_source.md&gt;</code></p> <p>Explanation of command parameters:</p> <p><code>-f markdown</code> \u2013 source file format (Markdown). <code>-t docx</code> \u2013 result format (Word). <code>-o</code> \u2013 path and name of the resulting file.</p> <p>Example command: <code>pandoc -f markdown -t docx -o 'docs/Project Setup.docx' docs/Project\\ Setup.md</code></p> <p>Note that in the shell we need to specify a backslash for the md file name so that the terminal will read the command as one argument. You can also wrap the entire document in quotes.</p> <p>If the file name contains spaces, note:</p> <ul> <li>Use a backslash \\ to indicate a space (e.g. <code>Project\\ Setup.md</code>).</li> <li>Or wrap the file name in quotes (e.g. <code>Project Setup.md</code>).</li> </ul> <p>Use Tab to autocomplete file names in the terminal - this will also automatically add the necessary slashes.</p>"},{"location":"Convert%20Markdown%20to%20docx/#converting-multiple-markdown-files-into-a-single-docx-file","title":"Converting multiple Markdown-files into a single DOCX file","text":"<p>In the previous section, we learned how to convert Markdown files to docx, but we encountered the fact that each file needs to be converted separately. This is inconvenient, since you will have to manually assemble the document later. In order to convert multiple Markdown files to a DOCX file in the specified order, you need to create an additional file and run just one command.</p>"},{"location":"Convert%20Markdown%20to%20docx/#creating-a-filelisttxt-file","title":"Creating a filelist.txt file","text":"<p>Setting the order of Markdown documents is necessary, since PyCharm automatically sorts documents alphabetically. To do this, I create a document <code>filelist.txt</code>.</p> <p></p> <p>Then I fill the document with paths in the order in which they should be written in DOCX.</p> <p></p> <p>I use relative paths and escape the paths in quotes.</p>"},{"location":"Convert%20Markdown%20to%20docx/#running-the-command","title":"Running the command","text":"<p>Once the <code>filelist.txt</code> document is created, I use the following command: <code>cat filelist.txt | xargs pandoc --from=markdown+rebase_relative_paths-blank_before_blockquote -t \u200b\u200bdocx -o combined.docx</code></p> <p>This will generate the <code>combined.docx</code> file.</p> <p>If you get <code>No such file or directory</code> as a result of running the command, check which directory you are running the command from. Run 'pwd' and make sure you are running the document conversion from the same directory where the Markdown files and images are located. You are probably running the convert command from the top directory, so change to the correct directory (use <code>cd</code> command)</p> <p>My project structure is shown below:</p> <p><code>how-to-create-web-docs/ \u251c\u2500\u2500 .venv/ # Directory for storing the Python virtual environment \u251c\u2500\u2500 docs/ # Folder with the main project documentation \u2502 \u251c\u2500\u2500image/ # Document images \u2502 \u251c\u2500\u2500 Convert Markdown to docx.md # Markdown file \u2502 \u251c\u2500\u2500 Deploy and Customize MkDocs.md # Markdown file \u2502 \u251c\u2500\u2500 Documentation Setup.md # Markdown file \u2502 \u251c\u2500\u2500 Links.md # Markdown file \u2502 \u251c\u2500\u2500 Project Setup.md # Markdown file \u2502 \u251c\u2500\u2500 index.md # Main documentation page \u2502 \u251c\u2500\u2500 extra.css # Additional styles for formatting the documentation \u2502 \u251c\u2500\u2500 filelist.txt # File containing a list of Markdown documents \u251c\u2500\u2500 site/ # Directory where MkDocs generates a static site \u251c\u2500\u2500 .gitignore # Git configuration file that specifies which files or folders to exclude from the repository \u251c\u2500\u2500 mkdocs.yml # Main MkDocs configuration file</code></p>"},{"location":"Convert%20Markdown%20to%20docx/#command-explanation","title":"Command Explanation","text":"<p>This command converts multiple Markdown files specified in filelist.txt into a single DOCX document using the pandoc utility. Here's a step-by-step explanation:</p> <ol> <li> <p><code>cat filelist.txt</code>     The <code>cat</code> command outputs the contents of <code>filelist.txt</code>. This file is assumed to list the paths to the Markdown files to be processed. Each path is on a new line.</p> <p>Example contents of <code>filelist.txt</code>:</p> <p><code>chapter1.md chapter2.md chapter3.md</code></p> </li> <li> <p><code>|</code> (pipe) The <code>|</code> character routes the output of the cat command as input to the command xargs.</p> </li> <li> <p><code>xargs</code> The <code>xargs</code> command takes the strings passed through the pipe and substitutes them as arguments to the pandoc command. This allows each of the specified files to be processed.</p> </li> <li> <p>pandoc <code>--from=markdown+rebase_relative_paths-blank_before_blockquote -t docx -o combined.docx</code> This command uses <code>pandoc</code> to convert Markdown files into a single DOCX document. Let's look at pandoc's arguments:</p> <ul> <li><code>--from=markdown+rebase_relative_paths-blank_before_blockquote</code>: The option specifies the format of the input files.</li> <li><code>markdown</code> is the Markdown format.</li> <li><code>+rebase_relative_paths</code> makes pandoc update relative paths in files.</li> <li><code>-blank_before_blockquote</code> disables adding blank lines before blockquotes.</li> <li><code>-t docx</code>: The option specifies the target conversion format - DOCX (Microsoft Word).</li> <li><code>-o combined.docx</code>: The option specifies the name of the output file (combined.docx).</li> </ul> </li> </ol> <p>What the whole command does:</p> <p><code>cat filelist.txt</code> reads a list of Markdown files.</p> <p><code>xargs</code> passes this list to pandoc.</p> <p><code>pandoc</code> combines all the specified files and converts them into a single DOCX file.</p> <p>Example output:</p> <p>If <code>filelist.txt</code> specifies the files:</p> <p><code>chapter1.md chapter2.md chapter3.md</code> Then pandoc will combine their contents into a single file <code>combined.docx</code>.</p>"},{"location":"Deploy%20and%20Customize%20MkDocs/","title":"Step 8: Deploy Documentation to GitHub Pages","text":""},{"location":"Deploy%20and%20Customize%20MkDocs/#build-and-preview-the-documentation-using-the-mkdocs-built-in-web-server","title":"Build and preview the documentation using the MkDocs built-in web server:","text":"<ul> <li>Run the following command in the terminal: <code>mkdocs serve</code></li> </ul> <p>    The site will be available locally for testing.  </p> <p>\u27a4 The site will automatically reload when you make changes in PyCharm.</p> <p>\u27a4 To stop the server, press Ctrl+C on your keyboard.</p>"},{"location":"Deploy%20and%20Customize%20MkDocs/#deploy-to-github-pages","title":"Deploy to GitHub Pages:","text":"<ul> <li>Run the <code>mkdocs gh-deploy</code> command in the terminal. </li> </ul> <p>\u27a4 This command creates a gh-pages branch, adds the compiled site to it, and pushes it to GitHub.</p> <p>\u27a4 The generated URL will look like this: https://[username].github.io/[repository-name]</p>"},{"location":"Deploy%20and%20Customize%20MkDocs/#step-9-edit-the-appearance-of-your-site","title":"Step 9: Edit the Appearance of Your Site","text":"<ol> <li>Create the <code>extra.css</code> file in the <code>docs</code> folder. </li> <li>Register your custom CSS in the <code>mkdocs.yml</code> configuration file. </li> <li>Add your custom styles to the <code>extra.css</code> file.    For example, in my case:</li> </ol> <pre><code>/* Header styles */\n.navbar.bg-primary {\n    background-image: none !important;\n    background-color: #2d6da7 !important;\n}\n\n/* Removing the default footer */\nfooter {\n    display: none !important;\n}\n\n/* Styles for the navigation bar */\n.navbar .nav-link {\n    color: #F8F9FA !important; /* Text color for the navigation bar */\n}\n\n.navbar .nav-link:hover {\n    color: #d3d9dA !important; /* Hover text color for the navigation bar */\n}\n</code></pre> <p> 4.  Write in our configuration (mkdocs.yml) the styling theme (in my case, it is \u201cmkdocs\u201d) and localization (for example, ru).</p> <p>\u27a4   Localization is written to translate default elements, for example, Pagination.</p>"},{"location":"Deploy%20and%20Customize%20MkDocs/#step-10-committing-sources-and-sending-to-the-git-repository","title":"Step 10: Committing Sources and Sending to the Git Repository","text":"<p>Follow these commands in sequence:</p> <p>Adding files to the staging area: <code>git add .</code></p> <ul> <li>This command adds all files and changes in the current directory (indicated by the <code>.</code>) to the staging area. It means you tell Git which files should be included in the next commit.</li> <li>If you need to add files from a specific folder (e.g., <code>docs</code>), use: <code>git add docs/</code> or <code>git add ./docs</code></li> </ul> <p>The choice depends on your preference, but both are valid.</p> <p>Creating a commit with a message: <code>git commit -m \"Description of changes\"</code></p> <ul> <li>This command saves the changes from the staging area to the repository with a message.</li> <li>If you don't use the -m flag, Git will open a text editor for you to write the description manually.</li> </ul> <p>Example: <code>git commit -m \"Added documentation files\"</code></p> <p>Pushing changes to the remote repository: <code>git push origin main</code></p> <ul> <li>This command sends (pushes) changes from your local repository to the remote repository (e.g., GitHub).</li> <li><code>origin</code> is the name of the remote repository (default).</li> <li><code>main</code> is the name of the branch where the changes are pushed. If your branch is named differently (e.g., <code>master</code>), replace <code>main</code> with the name of your branch.</li> </ul> <p>Now you can view the committed changes by visiting the following link: GitHub Repository</p> <p>Adjustments Made:</p> <ol> <li>Explained the meaning of the dot (.) as a reference to the current directory.</li> <li>Added alternative commands for adding files from specific folders (git add ./docs and git add docs/).</li> <li>Emphasized the logic behind each command for better understanding.</li> </ol>"},{"location":"Documentation%20Setup/","title":"Step 5: Create MkDocs Configuration (mkdocs.yml)","text":"<p>Create the <code>mkdocs.yml</code> file:</p> <ul> <li>In the root of the project, right-click the folder and choose \"Create File\".</li> <li>In the window that appears, enter the filename <code>mkdocs.yml</code>. </li> </ul> <p>\u27a4 To create a Yaml file, just add the <code>.yml</code> extension to the file name.</p> <ul> <li> <p>Add the file to Git.     \u27a4 After this step, you will have a <code>mkdocs.yml</code> file in your project tree.</p> </li> <li> <p>Create a docs folder for storing the source text files.</p> </li> <li>Create an <code>image</code> folder for storing images.</li> </ul> <p>As a result, your project structure will be scalable and look like this:</p> <pre><code>Web-docs/ # Parent directory\n\u251c\u2500\u2500 .venv/ # Virtual environment of the project \n\u251c\u2500\u2500 docs/ # Documentation source files \n\u251c\u2500\u2500 image/ # Documentation images \n\u251c\u2500\u2500 mkdocs.yml # MkDocs configuration file\n</code></pre> <p>Next, within the docs folder, create your first Markdown file.  \u27a4 To create a Markdown file, just add the <code>.md</code> extension to the filename and start adding content according to the rules described below.</p>"},{"location":"Documentation%20Setup/#customize-your-config-mkdocsyml","title":"Customize your config (mkdocs.yml)","text":"<p>As a result of editing, your config may have the following structure.</p> <pre><code># The name of your site, displayed in the page header\nsite_name: Web-docs using MkDocs\n\n# The URL of your site after deployment (essential for correct link functionality)\nsite_url: https://MkDocs-web-docs.github.io/how-to-create-web-docs/\n\n# Specify an additional [CSS](# \"Cascading Style Sheets: a style language for describing the appearance of HTML documents, including colors, fonts, indents, and other visual aspects\") file for custom styles\nextra_css:\n  - extra.css\n\n# Navigation (site page structure)\nnav:\n  - Creating a web manual using MkDocs: index.md    # The main page of the site\n  - Links: Links.md                                 # Link to the Links page\n  - Project Setup: Project Setup.md                 # Link to the Project Setup page\n  - Documentation Setup: Documentation Setup.md     # Link to the Documentation Setup page\n  - Deploy and Customize: Deploy and Customize MkDocs.md # Link to the Deploy and Customize page\n\n# Site theme and localization\ntheme:\n  name: mkdocs       # The theme being used (in this case, the standard MkDocs theme)\n  locale: ru         # Localization (Russian language)\n\n\n# Step 6: Create Documentation in Markdown Format\n</code></pre> <p>You need to include index.md in your navigation.</p>"},{"location":"Documentation%20Setup/#basics-of-writing-text-in-markdown","title":"Basics of writing text in Markdown","text":"<p>Markdown is a simple markup language for formatting text. It allows you to create structured text using simple symbols. Here are the main features:</p> <ol> <li>Headings    Use the <code>#</code> symbol to create headings of different levels. The more <code>#</code> symbols, the lower the heading level.    Example:    ```markdown    # Heading Level 1    ## Heading Level 2    ### Heading Level 3</li> <li>Paragraphs and Line Breaks</li> <li>To separate paragraphs, leave a blank line.</li> <li>To force a line break, add two spaces at the end of a line.</li> </ol> <p>Example:</p> <pre><code>This is the first paragraph.\n\nThis is the second paragraph.\nAnd this is the second line without a paragraph.\n</code></pre> <ol> <li>Text Formatting</li> <li>Bold: Wrap text in double asterisks () or double underscores (__). Example:**</li> </ol> <pre><code>**Bold text**\n__Bold text__\n</code></pre> <ul> <li>Italics: Wrap text in single asterisks () or single underscores (_). Example:*</li> </ul> <pre><code>*Italics*\n_Italics_\n</code></pre> <ul> <li>Strikethrough: Use double tildes (~~). Example:</li> </ul> <pre><code>~~Strikethrough text~~\n</code></pre> <ol> <li>Lists</li> <li>Bulleted list: Use -, , or +. Example:*</li> </ol> <pre><code>- Item 1\n- Item 2\n  - Sub-item\n  ```\n* Numbered list: Use numbers with a period.\n**Example:**\n```markdown \n1. First\n2. Second\n</code></pre> <ol> <li>Links</li> </ol> <pre><code>[Link text](URL)\n</code></pre> <ol> <li>Images</li> </ol> <pre><code>![Image name](../image/1_structure_project.png)\n</code></pre> <p>\u27a4 To add an image, you don\u2019t need to specify the path manually. Just drag the image from the left menu to the desired location, and PyCharm will automatically generate the path.  \u27a4 PyCharm has three document display modes, including a preview with images.  7.  Code * Inline code: Wrap the text in backticks (`). Example:</p> <pre><code>`python -m venv .venv`\n</code></pre> <ul> <li>Code block: Wrap the text in triple backticks (`````) followed by the language. Example:</li> </ul> <pre><code>\n```print(\"Hello, World!\")```\n\n</code></pre> <ol> <li>Tables Create tables using vertical bars (|) and hyphens (-). Example:</li> </ol> <pre><code>| Heading 1 | Heading 2 |\n|-----------|-----------|\n| Text 1    | Text 2    |\n</code></pre> <ol> <li>Note Use the <code>&gt;</code> symbol to create notes. Example:</li> </ol> <pre><code>&gt; Note: Always test your code before deploying.\n</code></pre>"},{"location":"Documentation%20Setup/#more-about-numbering","title":"More about numbering","text":"<p>To ensure that mixed numbering is displayed correctly in MkDocs (or any Markdown document), it is important to use proper indentation and formatting. Here is an example of how to do it:</p> <p>!Indentation must be a multiple of 4 spaces.</p> <ol> <li> <p>First item</p> <ul> <li>Unnumbered item inside a sub-item<ul> <li>Another unnumbered item</li> </ul> </li> </ul> </li> <li> <p>Second item</p> <ul> <li>Unnumbered item in main list<ul> <li>Nested unnumbered item<ul> <li>Deeper nested unnumbered item</li> </ul> </li> </ul> </li> </ul> </li> </ol> <p>In MkDocs, as in Markdown, the correct display of nested numbering depends on the theme used and the way Markdown is interpreted. For standard Markdown, automatic support for \"sub-items with nested numbers\" (e.g. 2.1.1) may not be available, since Markdown does not support multi-part numbering by default.</p> <p>Later we will look at working with other, more flexible, themes.</p> <p>In some cases, the numbering may be broken. To fix this, I use HTML to continue the numbering:</p> <pre><code>&lt;ol start=\"5\"&gt;\n  &lt;li&gt;Links:&lt;/li&gt;\n  &lt;a href=\"URL\"&gt;Link text&lt;/a&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"Documentation%20Setup/#step-7-complete-the-structure-of-your-project","title":"Step 7: Complete the Structure of Your Project","text":"<ol> <li>In the source folder, create the file <code>index.md</code> \u2014 the text of this document will be displayed on the home page of the site. </li> <li>Create the <code>.gitignore</code> file in the root of the project and write <code>site</code> in it \u2014 this will prevent Git from tracking the compiled files.  \u27a4 The \"site\" folder will be automatically generated during deployment.</li> </ol> <p>Now, your project structure looks like this:</p> <pre><code>Web-docs/  # Parent directory\n\u251c\u2500\u2500 .venv/  # Virtual environment\n\u251c\u2500\u2500 docs/  # Documentation source files\n    \u251c\u2500\u2500 index.md/  # Home page\n\u251c\u2500\u2500 image/  # Documentation images\n\u251c\u2500\u2500 mkdocs.yml  # MkDocs configuration file\n\u251c\u2500\u2500 .gitignore  # Ignored files\n</code></pre>"},{"location":"Glossary/","title":"Glossary","text":"<p>.venv: python virtual environment folder. Contains project dependencies isolated from the system.</p> <p>Brew (Homebrew): a package manager for macOS and Linux that allows you to install and manage various command line tools.</p> <p>cat: a terminal command that prints the contents of a file to the terminal.</p> <p>cd: a command to change the working directory in the terminal.</p> <p>Clone Repository / Get from VCS: the process of copying a remote repository from GitHub to a local computer for working with it.</p> <p>Command-line tool: a program controlled via a text-based command-line interface, without a graphical interface.</p> <p>Combined.docx: the resulting Word file created by combining and converting several Markdown documents.</p> <p>CSS (Cascading Style Sheets): a style language for describing the appearance of HTML documents, including colors, fonts, indents, and other visual aspects.</p> <p>Ctrl+C: a keyboard shortcut used to stop a terminal process, such as a local MkDocs server.</p> <p>docs/: a folder containing the source documentation files in Markdown format.</p> <p>DOCX: a Microsoft Word document format that supports complex markup, images, tables, and other formatting.</p> <p>Escape characters: special characters used to represent spaces or other characters in terminal commands. For example, Project\\ Setup.md uses a backslash () to represent a space.</p> <p>extra.css: a file containing custom CSS styles for changing the appearance of the documentation generated by MkDocs.</p> <p>Filelist.txt: a text file containing a list of paths to Markdown files to be merged or processed.</p> <p>gh-pages: a special branch in the GitHub repository that contains the generated site files for GitHub Pages.</p> <p>GitHub: a platform for collaborative work on projects, managing repositories, and hosting code.</p> <p>GitHub Pages: a service for hosting static sites directly from GitHub repositories. Often used to publish documentation.</p> <p>GitHub Repository: a storage space for project files used for version control and collaborative work on code.</p> <p>Haskell: the programming language in which Pandoc is written. It features a functional style and strong typing.</p> <p>HTTPS: a protocol for secure connection and data transfer between a computer and a server.</p> <p>image/: a folder containing images used in documentation.</p> <p>index.md: a Markdown file that appears on the main page of a site created with MkDocs.</p> <p>Localization: the process of configuring a site to support a specific language, such as Russian (ru), with translation of interface elements.</p> <p>Markdown: a markup language that allows you to format text using simple characters. It is used to write structured text, such as documentation.</p> <p>mkdocs-material: a skin for MkDocs that provides modern and convenient styles for documentation.</p> <p>mkdocs.yml: MkDocs configuration file. Used to configure the site, including the theme, localization, and custom styles.</p> <p>mkdocs gh-deploy: a command that generates a static site, creates a gh-pages branch, and uploads the site's content to a GitHub repository.</p> <p>mkdocs serve: a command to start a local MkDocs web server. Allows you to preview the documentation before deployment.</p> <p>nav: a section in mkdocs.yml that describes the site's navigation structure. Determines which files are displayed as pages.</p> <p>Pandoc: a feature-rich command-line tool for converting documents between different formats, such as Markdown, DOCX, PDF.</p> <p>Pagination: splitting content into pages with buttons for navigating between them. MkDocs supports and translates this when localizing.</p> <p>Pipe (|): a symbol used to pass the output of one command as input to another command.</p> <p>pip: a tool for installing and managing Python libraries and packages.</p> <p>Project structure: a hierarchical organization of files and folders in a project. For example, the docs/ folder contains Markdown documents.</p> <p>Python: a programming language for its simple syntax and wide range of libraries. It is used to work with virtual environments and install packages.</p> <p>Python wrapper: an interface written in Python that provides access to the functionality of another program or library, such as pypandoc.</p> <p>pwd: a terminal command that shows the current working directory.</p> <p>PyCharm: integrated development environment (IDE) with support for Python, Markdown files, and documentation preview functions.</p> <p>Relative paths: references to files or folders relative to the current working directory, instead of specifying the full path.</p> <p>SSH (Secure Shell): a protocol for securely connecting to remote servers, often used to work with repositories. Requires SSH keys to be configured.</p> <p>SSH keys: cryptographic keys used for secure authentication without entering a password.</p> <p>Staging area: a time zone where changes ready for commit are stored.</p> <p>Static site: a website consisting of pre-generated HTML pages.</p> <p>Terminal: a program for executing commands in the text interface of the operating system.</p> <p>theme: a parameter in mkdocs.yml that specifies the theme of the site.</p> <p>xargs: a command-line utility that allows you to pass input (such as a list of files) to another command as arguments.</p> <p>YAML: data serialization format that uses indentation for structuring. Used in configuration files (such as mkdocs.yml).</p>"},{"location":"Links/","title":"Links","text":"<ul> <li>This guide is based on the official MkDocs documentation \u2013 visit the https://www.mkdocs.org/.</li> <li>If you have any questions, feel free to contact me via email: tedkuzmina@gmail.com.</li> <li>Please leave your feedback or suggestions about this document My LinkedInn.</li> <li>You can view the result of our work Our site.</li> <li>The source files are available My GitHub.</li> <li>You can view the instructions for the Material Material for MkDocs.</li> </ul>"},{"location":"Material%20theme%20for%20MkDocs/","title":"Setting up the Material theme for MkDocs","text":"<p>Enhance your document with the Material theme.</p> <p>In this tutorial, we'll cover how to:</p> <ol> <li>Set up tooltips with definitions for concepts.</li> <li>Add a footer.</li> <li>Add a PDF export button.</li> <li>Set up a site footer.</li> <li>Change the site color scheme and add styles.</li> </ol>"},{"location":"Material%20theme%20for%20MkDocs/#reconfiguring-a-virtual-environment","title":"Reconfiguring a virtual environment","text":"<p>If you encounter errors while setting up a theme, follow these steps:</p> <ol> <li>Delete the old virtual environment if you created one.</li> <li> <p>Create a new one:</p> <ul> <li>In the IDE panel select <code>Add New Interpreter</code> &gt; <code>Add Local Interpreter</code>.</li> <li>Specify the settings and confirm.</li> </ul> <p></p> </li> <li> <p>Activate the environment: <code>source venv/bin/activate</code></p> </li> <li> <p>Add a <code>requirements.txt</code> file to the root of the project with the following content:</p> <ul> <li>mkdocs </li> <li>mkdocs-material </li> <li>mkdocs-exporter</li> </ul> <p></p> <p>Why this file? It simplifies dependency management, allowing you to quickly install all the necessary libraries with a single command.</p> </li> <li> <p>Install dependencies: <code>pip install -r requirements.txt</code></p> </li> <li>If the <code>mkdocs-exporter</code> library is not installed, run the command <code>pip install mkdocs-exporter</code>.</li> </ol>"},{"location":"Material%20theme%20for%20MkDocs/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>This config is suitable for a basic project with an emphasis on interface customization (color scheme, custom footer) and support for exporting documentation to PDF. Here is the <code>mkdocs.yml</code> configuration file with explanations:</p>"},{"location":"Material%20theme%20for%20MkDocs/#basic-settings","title":"Basic settings","text":"<pre><code>site_name: Web-docs using MkDocs\nsite_url: https://MkDocs-web-docs.github.io/how-to-create-web-docs/\n</code></pre> <ul> <li>site_name: The name of your documentation site. It appears in the browser title and site header.</li> <li>site_url: The base URL for generating links when building a static site.</li> </ul>"},{"location":"Material%20theme%20for%20MkDocs/#navigation","title":"Navigation","text":"<pre><code>nav:\n  - Creating a web manual using MkDocs: index.md\n  - Links: Links.md\n  - Project Setup: Project Setup.md\n  - Documentation Setup: Documentation Setup.md\n  - Deploy and Customize: Deploy and Customize MkDocs.md\n  - Convert Markdown to docx: Convert Markdown to docx.md\n  - Glossary: Glossary.md\n</code></pre> <p>Navigation defines the menu structure. Each line links the section title to a Markdown file.</p>"},{"location":"Material%20theme%20for%20MkDocs/#theme-settings","title":"Theme settings","text":"<pre><code>theme:\n  palette:\n    primary: pink\n    accent: lime\n  name: material\n  custom_dir: overrides\n  language: en\n  features:\n    - navigation.instant\n    - header.autohide\n    - content.tooltips\n  hide:\n    - footer\n</code></pre> <ul> <li>palette: sets the color scheme. <ul> <li>primary: the main color (e.g. header and buttons). </li> <li>accent: accent color (e.g. links).</li> </ul> </li> <li>custom_dir: specifies the folder with custom templates (e.g. for changing the footer). </li> <li>features:<ul> <li>navigation.instant: instant navigation without reloading the page. </li> <li>header.autohide: hide the header when scrolling down. </li> <li>content.tooltips: improved tooltips for the title attribute.</li> </ul> </li> <li>hide.footer: hides the standard footer.</li> </ul>"},{"location":"Material%20theme%20for%20MkDocs/#plugins","title":"Plugins","text":"<pre><code>plugins:\n  - exporter:\n      formats:\n        pdf:\n          enabled: true\n          aggregator:\n            enabled: true\n            output: documentation.pdf\n            covers: all\n      buttons:\n        - title: \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 PDF\n          icon: material-file-download-outline\n  - search\n</code></pre> <ul> <li>exporter: adds PDF export functionality. The button with the text \"Save to PDF\" will be available on the site.</li> <li>search: enables built-in search.</li> </ul>"},{"location":"Material%20theme%20for%20MkDocs/#markdown-extensions","title":"Markdown Extensions","text":"<pre><code>markdown_extensions:\n  - abbr\n  - attr_list\n  - pymdownx.snippets\n</code></pre> <ul> <li>abbr: allows you to specify abbreviations.</li> <li>attr_list: adds attribute support for Markdown elements.</li> <li>pymdownx.snippets: allows you to reuse certain Markdown blocks.</li> </ul>"},{"location":"Material%20theme%20for%20MkDocs/#adding-tooltips","title":"Adding tooltips","text":"<ol> <li>Add the following configuration to your mkdocs.yml file to enable tooltips:     <code>yaml     theme:       features:         - content.tooltips</code></li> <li> <p>Add the title attribute to the Markdown text: Example: <code>markdown     [Ctrl+C](# \"A keyboard shortcut used to stop a terminal process\")</code>     This code will add a tooltip when you hover over a concept, and it will display its definition.     </p> <p>The title attribute will not work inside a code block.</p> </li> <li> <p>Check the result. When you run the site with mkdocs serve, you will be able to see the tooltip that appears when you hover over <code>Ctrl+C</code>.</p> </li> </ol> <p>Tooltip display is not shown in PyCharm preview</p>"},{"location":"Material%20theme%20for%20MkDocs/#removing-the-footer","title":"Removing the footer","text":"<p>Next, remove the footer if necessary. The instructions indicate a simple method, which is described here.  </p> <p>If the standard method did not work, use the Material theme customization:</p> <ol> <li>Create an overrides folder: <code>mkdir overrides</code></li> <li>Create a footer.html file:      <code>mkdir -p overrides/partials</code> <code>echo \"\" &gt; overrides/partials/footer.html</code></li> <li>In the config, specify the custom_dir directory:</li> </ol> <pre><code>theme:\n  name: material \n  custom_dir: overrides\n</code></pre> <p>Now the footer will be completely removed.</p>"},{"location":"Material%20theme%20for%20MkDocs/#changing-the-color-scheme","title":"Changing the color scheme","text":"<p>To change the colors, use the instructions Changing the colors. </p> <p>In the config, change the parameters palette:</p> <p>My example is pink)</p> <pre><code>palette:\n  primary: pink\n  accent: lime\n</code></pre> <p>The material is an amazing theme with very clear and concise instructions. Imagine that from boring Word you can now create beautiful web documents simply and easily.</p> <p>For take this example, you can just copy this config: </p> <pre><code>site_name: Web-docs using MkDocs\nsite_url: https://MkDocs-web-docs.github.io/how-to-create-web-docs/\n\nnav:\n  - Creating a web manual using MkDocs: index.md\n  - Links: Links.md\n  - Project Setup: Project Setup.md\n  - Documentation Setup: Documentation Setup.md\n  - Deploy and Customize: Deploy and Customize MkDocs.md\n  - Convert Markdown to docx: Convert Markdown to docx.md\n  - Material theme for MkDocs: Material theme for MkDocs.md\n  - Glossary: Glossary.md\n\ntheme:\n  palette:\n    primary: pink\n    accent: lime\n  name: material\n  custom_dir: overrides\n  language: en\n  features:\n    - navigation.instant\n    - header.autohide\n    - content.tooltips\n  hide:\n    - footer\n\nplugins:\n  - exporter:\n      formats:\n        pdf:\n          enabled: true\n          aggregator:\n            enabled: true\n            output: documentation.pdf\n            covers: all\n      buttons:\n        - title: Save to PDF\n          icon: material-file-download-outline\n          enabled: !!python/name:mkdocs_exporter.formats.pdf.buttons.download.enabled\n          attributes: !!python/name:mkdocs_exporter.formats.pdf.buttons.download.attributes\n  - search\n\nmarkdown_extensions:\n  - abbr\n  - attr_list\n  - pymdownx.snippets\n\nextra: {}\n</code></pre> <p>Now our project structure looks this:</p> <p>how-to-create-web-docs/ |--- docs/                          # Directory with Markdown documentation files |   |--- image/                     # Image folder |   |--- Convert Markdown to docx.md |   |--- Deploy and Customize MkDocs.md |   |--- Documentation Setup.md |   |--- extra.css                  # Custom styles (if applicable) |   |--- filelist.txt               # Auxiliary file (e.g. file list) |   |--- Glossary.md               |   |--- index.md                  |   |--- Links.md                  |   |--- Material theme for MkDocs.md |   |--- Project Setup.md |--- overrides/                     # Template customization |   |--- partials/                  # Template parts |   |   |--- footer.html            # Custom footer |--- site/                          # Generated site (created automatically) |--- venv/                          # Python virtual environment |--- .gitignore                     # File to exclude from repository |--- mkdocs.yml                     # Main MkDocs configuration file |--- requirements.txt               # Project dependencies file  </p> <p>Don't forget to regularly commit and push the sources so as not to lose anything\u2728</p>"},{"location":"Project%20Setup/","title":"Step 1: Creating an organization in GitHub","text":"<p>Create an organization: </p> <ul> <li>Log in to GitHub.  </li> <li>Select the \"Create an organization\" menu.    </li> </ul> <p>Select a pricing plan: </p> <ul> <li>Choose an appropriate pricing plan for your organization.    </li> </ul> <p>Set up the organization: </p> <ul> <li>Fill in the necessary settings. </li> <li>Confirm the creation.  </li> </ul> <p>\u27a4 The URL of your future site will be generated from the \"Organization name\" field and will follow this structure: https://[site-name].github.io/.</p>"},{"location":"Project%20Setup/#step-2-create-a-new-repository","title":"Step 2: Create a new repository","text":"<p>Create a repository:</p> <p>    \u27a4 Create a repository on behalf of the organization.    \u27a4 Select public/empty (the repository should not contain, for example, README.md).  Clone the repository in PyCharm:</p> <ul> <li>Copy the repository URL (either HTTPS or SSH).</li> <li>In PyCharm, select \"Clone Repository\" or \"Get from VCS\".    </li> <li>Copy the URL from your organization's page in GitHub (I choose SSH).    </li> <li>Paste the URL and click \"Clone\".</li> </ul> <p>\u27a4 If you choose SSH, make sure you have SSH settings configured. We'll discuss why this is more convenient in later posts.  </p> <ul> <li>Click \u201cTrust Project\u201d in the window that opens.</li> </ul>"},{"location":"Project%20Setup/#step-3-setting-up-a-virtual-environment","title":"Step 3: Setting up a virtual environment","text":"<p>Create a virtual environment:</p> <ul> <li>Run the following command in the PyCharm terminal:     <code>python -m venv .venv</code></li> </ul> <p>\u27a4 If you get a \"command not found\" error, check your installed Python version and adjust the command accordingly.  </p> <p>    Your Python version:     For example, I used:    <code>python3.13 -m venv .venv</code></p> <p>\u27a4 You can see the PyCharm version in the lower right corner of the screen. \u27a4 Setting up a virtual environment helps avoid conflicts between packages in different projects. \u27a4 It's not possible to install two or more different versions of the same package in one environment. The solution is to create another environment.</p> <p>Activate the environment:</p> <ul> <li>In the PyCharm terminal, run:      <code>source .venv/bin/activate</code></li> </ul>"},{"location":"Project%20Setup/#step-4-install-mkdocs-and-the-necessary-packages","title":"Step 4: Install MkDocs and the necessary packages","text":"<p>Install via pip:</p> <ul> <li>Run the following in the terminal: <code>pip install mkdocs mkdocs-material</code></li> </ul> <p>\u27a4 If needed, specify the version with: <code>pip3.13 install mkdocs mkdocs-material</code></p> <ul> <li>Alternatively, use the \"Packages\" toolbar in PyCharm.</li> </ul>"}]}