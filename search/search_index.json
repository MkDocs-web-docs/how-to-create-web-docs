{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Creating a web manual using MkDocs some intro about system...","title":"Creating a web manual using MkDocs"},{"location":"#creating-a-web-manual-using-mkdocs","text":"some intro about system...","title":"Creating a web manual using MkDocs"},{"location":"Convert%20md_to_docx/","text":"Convert Markdown to Word with Pandoc Let's look at how to convert Markdown (.md) files to Word (.docx) using Pandoc. Pandoc is a command-line tool and does not have a graphical interface. At first check if Pandoc is installed on your computer: Open a terminal and run the command: brew info pandoc If the response says not installed , then Pandoc is not installed. Install Pandoc To install Pandoc, run the following command in the terminal: brew install pandoc Pandoc is written in Haskell and is installed via brew , not pip . There is a Python wrapper called pypandoc , but it wraps Pandoc . Basics of working with Pandoc After installation, check Pandoc help to get acquainted with its capabilities: pandoc --help Command structure: Enter the command pandoc. Specify the required options (the list can be found in the help). Upload files for conversion. Convert Markdown files to Word For example, we will convert Markdown files to Word. To perform the conversion, use the following command: pandoc -f markdown -t docx -o <path_to_result.docx> <path_to_source.md> Explanation of command parameters: -f markdown \u2013 source file format (Markdown). -t docx \u2013 result format (Word). -o \u2013 path and name of the resulting file. Example command: pandoc -f markdown -t docx -o 'docs/Project Setup.docx' docs/Project\\ Setup.md Note that in the shell we need to specify a backslash for the md file name so that the terminal will read the command as one argument. You can also wrap the entire document in quotes. If the file name contains spaces, note: Use a backslash \\ to indicate a space (e.g. Project\\ Setup.md ). Or wrap the file name in quotes (e.g. Project Setup.md ). Use Tab to autocomplete file names in the terminal - this will also automatically add the necessary slashes.","title":"Convert md to docx"},{"location":"Convert%20md_to_docx/#convert-markdown-to-word-with-pandoc","text":"Let's look at how to convert Markdown (.md) files to Word (.docx) using Pandoc. Pandoc is a command-line tool and does not have a graphical interface. At first check if Pandoc is installed on your computer: Open a terminal and run the command: brew info pandoc If the response says not installed , then Pandoc is not installed.","title":"Convert Markdown to Word with Pandoc"},{"location":"Convert%20md_to_docx/#install-pandoc","text":"To install Pandoc, run the following command in the terminal: brew install pandoc Pandoc is written in Haskell and is installed via brew , not pip . There is a Python wrapper called pypandoc , but it wraps Pandoc .","title":"Install Pandoc"},{"location":"Convert%20md_to_docx/#basics-of-working-with-pandoc","text":"After installation, check Pandoc help to get acquainted with its capabilities: pandoc --help Command structure: Enter the command pandoc. Specify the required options (the list can be found in the help). Upload files for conversion.","title":"Basics of working with Pandoc"},{"location":"Convert%20md_to_docx/#convert-markdown-files-to-word","text":"For example, we will convert Markdown files to Word. To perform the conversion, use the following command: pandoc -f markdown -t docx -o <path_to_result.docx> <path_to_source.md> Explanation of command parameters: -f markdown \u2013 source file format (Markdown). -t docx \u2013 result format (Word). -o \u2013 path and name of the resulting file. Example command: pandoc -f markdown -t docx -o 'docs/Project Setup.docx' docs/Project\\ Setup.md Note that in the shell we need to specify a backslash for the md file name so that the terminal will read the command as one argument. You can also wrap the entire document in quotes. If the file name contains spaces, note: Use a backslash \\ to indicate a space (e.g. Project\\ Setup.md ). Or wrap the file name in quotes (e.g. Project Setup.md ). Use Tab to autocomplete file names in the terminal - this will also automatically add the necessary slashes.","title":"Convert Markdown files to Word"},{"location":"Deploy%20and%20Customize%20MkDocs/","text":"Step 8: Deploy Documentation to GitHub Pages Build and preview the documentation using the MkDocs built-in web server: Run the following command in the terminal: mkdocs serve The site will be available locally for testing. \u27a4 The site will automatically reload when you make changes in PyCharm. \u27a4 To stop the server, press Ctrl+C on your keyboard. Deploy to GitHub Pages: Run the mkdocs gh-deploy command in the terminal. \u27a4 This command creates a gh-pages branch, adds the compiled site to it, and pushes it to GitHub. \u27a4 The generated URL will look like this: https://[username].github.io/[repository-name] Step 9: Edit the Appearance of Your Site Create the extra.css file in the docs folder. Register your custom CSS in the mkdocs.yml configuration file. Add your custom styles to the extra.css file. For example, in my case: /* Header styles */ .navbar.bg-primary { background-image: none !important; background-color: #2d6da7 !important; } /* Removing the default footer */ footer { display: none !important; } /* Styles for the navigation bar */ .navbar .nav-link { color: #F8F9FA !important; /* Text color for the navigation bar */ } .navbar .nav-link:hover { color: #d3d9dA !important; /* Hover text color for the navigation bar */ } 4. Write in our configuration (mkdocs.yml) the styling theme (in my case, it is \u201cmkdocs\u201d) and localization (for example, ru). \u27a4 Localization is written to translate default elements, for example, pagination. Step 10: Committing Sources and Sending to the Git Repository Follow these commands in sequence: Adding files to the staging area: git add . This command adds all files and changes in the current directory (indicated by the . ) to the staging area. It means you tell Git which files should be included in the next commit. If you need to add files from a specific folder (e.g., docs ), use: git add docs/ or git add ./docs The choice depends on your preference, but both are valid. Creating a commit with a message: git commit -m \"Description of changes\" This command saves the changes from the staging area to the repository with a message. If you don't use the -m flag, Git will open a text editor for you to write the description manually. Example: git commit -m \"Added documentation files\" Pushing changes to the remote repository: git push origin main This command sends (pushes) changes from your local repository to the remote repository (e.g., GitHub). origin is the name of the remote repository (default). main is the name of the branch where the changes are pushed. If your branch is named differently (e.g., master ), replace main with the name of your branch. Now you can view the committed changes by visiting the following link: GitHub Repository Adjustments Made: Explained the meaning of the dot (.) as a reference to the current directory. Added alternative commands for adding files from specific folders (git add ./docs and git add docs/). Emphasized the logic behind each command for better understanding.","title":"Deploy and Customize"},{"location":"Deploy%20and%20Customize%20MkDocs/#step-8-deploy-documentation-to-github-pages","text":"","title":"Step 8: Deploy Documentation to GitHub Pages"},{"location":"Deploy%20and%20Customize%20MkDocs/#build-and-preview-the-documentation-using-the-mkdocs-built-in-web-server","text":"Run the following command in the terminal: mkdocs serve The site will be available locally for testing. \u27a4 The site will automatically reload when you make changes in PyCharm. \u27a4 To stop the server, press Ctrl+C on your keyboard.","title":"Build and preview the documentation using the MkDocs built-in web server:"},{"location":"Deploy%20and%20Customize%20MkDocs/#deploy-to-github-pages","text":"Run the mkdocs gh-deploy command in the terminal. \u27a4 This command creates a gh-pages branch, adds the compiled site to it, and pushes it to GitHub. \u27a4 The generated URL will look like this: https://[username].github.io/[repository-name]","title":"Deploy to GitHub Pages:"},{"location":"Deploy%20and%20Customize%20MkDocs/#step-9-edit-the-appearance-of-your-site","text":"Create the extra.css file in the docs folder. Register your custom CSS in the mkdocs.yml configuration file. Add your custom styles to the extra.css file. For example, in my case: /* Header styles */ .navbar.bg-primary { background-image: none !important; background-color: #2d6da7 !important; } /* Removing the default footer */ footer { display: none !important; } /* Styles for the navigation bar */ .navbar .nav-link { color: #F8F9FA !important; /* Text color for the navigation bar */ } .navbar .nav-link:hover { color: #d3d9dA !important; /* Hover text color for the navigation bar */ } 4. Write in our configuration (mkdocs.yml) the styling theme (in my case, it is \u201cmkdocs\u201d) and localization (for example, ru). \u27a4 Localization is written to translate default elements, for example, pagination.","title":"Step 9: Edit the Appearance of Your Site"},{"location":"Deploy%20and%20Customize%20MkDocs/#step-10-committing-sources-and-sending-to-the-git-repository","text":"Follow these commands in sequence: Adding files to the staging area: git add . This command adds all files and changes in the current directory (indicated by the . ) to the staging area. It means you tell Git which files should be included in the next commit. If you need to add files from a specific folder (e.g., docs ), use: git add docs/ or git add ./docs The choice depends on your preference, but both are valid. Creating a commit with a message: git commit -m \"Description of changes\" This command saves the changes from the staging area to the repository with a message. If you don't use the -m flag, Git will open a text editor for you to write the description manually. Example: git commit -m \"Added documentation files\" Pushing changes to the remote repository: git push origin main This command sends (pushes) changes from your local repository to the remote repository (e.g., GitHub). origin is the name of the remote repository (default). main is the name of the branch where the changes are pushed. If your branch is named differently (e.g., master ), replace main with the name of your branch. Now you can view the committed changes by visiting the following link: GitHub Repository Adjustments Made: Explained the meaning of the dot (.) as a reference to the current directory. Added alternative commands for adding files from specific folders (git add ./docs and git add docs/). Emphasized the logic behind each command for better understanding.","title":"Step 10: Committing Sources and Sending to the Git Repository"},{"location":"Documentation%20Setup/","text":"Step 5: Create MkDocs Configuration (mkdocs.yml) Create the mkdocs.yml file : In the root of the project, right-click the folder and choose \"Create File\". In the window that appears, enter the filename mkdocs.yml . \u27a4 To create a Yaml file, just add the .yml extension to the file name. Add the file to Git. \u27a4 After this step, you will have a mkdocs.yml file in your project tree. Create a docs folder for storing the source text files. Create an image folder for storing images. As a result, your project structure will be scalable and look like this: Web-docs/ # Parent directory \u251c\u2500\u2500 .venv/ # Virtual environment of the project \u251c\u2500\u2500 docs/ # Documentation source files \u251c\u2500\u2500 image/ # Documentation images \u251c\u2500\u2500 mkdocs.yml # MkDocs configuration file Next, within the docs folder, create your first Markdown file. \u27a4 To create a Markdown file, just add the .md extension to the filename and start adding content according to the rules described below. Customize your config (mkdocs.yml) As a result of editing, your config may have the following structure. # The name of your site, displayed in the page header site_name: Web-docs using MkDocs # The URL of your site after deployment (essential for correct link functionality) site_url: https://MkDocs-web-docs.github.io/how-to-create-web-docs/ # Specify an additional CSS file for custom styles extra_css: - extra.css # Navigation (site page structure) nav: - Creating a web manual using MkDocs: index.md # The main page of the site - Links: Links.md # Link to the Links page - Project Setup: Project Setup.md # Link to the Project Setup page - Documentation Setup: Documentation Setup.md # Link to the Documentation Setup page - Deploy and Customize: Deploy and Customize MkDocs.md # Link to the Deploy and Customize page # Site theme and localization theme: name: mkdocs # The theme being used (in this case, the standard MkDocs theme) locale: ru # Localization (Russian language) # Step 6: Create Documentation in Markdown Format You need to include index.md in your navigation. Basics of writing text in Markdown Markdown is a simple markup language for formatting text. It allows you to create structured text using simple symbols. Here are the main features: Headings Use the # symbol to create headings of different levels. The more # symbols, the lower the heading level. Example: ```markdown # Heading Level 1 ## Heading Level 2 ### Heading Level 3 Paragraphs and Line Breaks To separate paragraphs, leave a blank line. To force a line break, add two spaces at the end of a line. Example: This is the first paragraph. This is the second paragraph. And this is the second line without a paragraph. Text Formatting Bold: Wrap text in double asterisks ( ) or double underscores (__). Example:** **Bold text** __Bold text__ Italics: Wrap text in single asterisks ( ) or single underscores (_). Example: * *Italics* _Italics_ Strikethrough: Use double tildes (~~). Example: ~~Strikethrough text~~ Lists Bulleted list: Use -, , or +. Example: * - Item 1 - Item 2 - Sub-item ``` * Numbered list: Use numbers with a period. **Example:** ```markdown 1. First 2. Second Links [Link text](URL) Images ![Image name](../image/1_structure_project.png) \u27a4 To add an image, you don\u2019t need to specify the path manually. Just drag the image from the left menu to the desired location, and PyCharm will automatically generate the path. \u27a4 PyCharm has three document display modes, including a preview with images. 7. Code * Inline code: Wrap the text in backticks (`). Example: `python -m venv .venv` Code block: Wrap the text in triple backticks (`````) followed by the language. Example: ```print(\"Hello, World!\")``` Tables Create tables using vertical bars (|) and hyphens (-). Example: | Heading 1 | Heading 2 | |-----------|-----------| | Text 1 | Text 2 | Note Use the > symbol to create notes. Example: > Note: Always test your code before deploying. More about numbering To ensure that mixed numbering is displayed correctly in MkDocs (or any Markdown document), it is important to use proper indentation and formatting. Here is an example of how to do it: !Indentation must be a multiple of 4 spaces. First item Unnumbered item inside a sub-item Another unnumbered item Second item Unnumbered item in main list Nested unnumbered item Deeper nested unnumbered item In MkDocs , as in Markdown , the correct display of nested numbering depends on the theme used and the way Markdown is interpreted. For standard Markdown, automatic support for \"sub-items with nested numbers\" (e.g. 2.1.1) may not be available, since Markdown does not support multi-part numbering by default. Later we will look at working with other, more flexible, themes. In some cases, the numbering may be broken. To fix this, I use HTML to continue the numbering: <ol start=\"5\"> <li>Links:</li> <a href=\"URL\">Link text</a> </ol> Step 7: Complete the Structure of Your Project In the source folder, create the file index.md \u2014 the text of this document will be displayed on the home page of the site. Create the .gitignore file in the root of the project and write site in it \u2014 this will prevent Git from tracking the compiled files. \u27a4 The \"site\" folder will be automatically generated during deployment. Now, your project structure looks like this: Web-docs/ # Parent directory \u251c\u2500\u2500 .venv/ # Virtual environment \u251c\u2500\u2500 docs/ # Documentation source files \u251c\u2500\u2500 index.md/ # Home page \u251c\u2500\u2500 image/ # Documentation images \u251c\u2500\u2500 mkdocs.yml # MkDocs configuration file \u251c\u2500\u2500 .gitignore # Ignored files","title":"Documentation Setup"},{"location":"Documentation%20Setup/#step-5-create-mkdocs-configuration-mkdocsyml","text":"Create the mkdocs.yml file : In the root of the project, right-click the folder and choose \"Create File\". In the window that appears, enter the filename mkdocs.yml . \u27a4 To create a Yaml file, just add the .yml extension to the file name. Add the file to Git. \u27a4 After this step, you will have a mkdocs.yml file in your project tree. Create a docs folder for storing the source text files. Create an image folder for storing images. As a result, your project structure will be scalable and look like this: Web-docs/ # Parent directory \u251c\u2500\u2500 .venv/ # Virtual environment of the project \u251c\u2500\u2500 docs/ # Documentation source files \u251c\u2500\u2500 image/ # Documentation images \u251c\u2500\u2500 mkdocs.yml # MkDocs configuration file Next, within the docs folder, create your first Markdown file. \u27a4 To create a Markdown file, just add the .md extension to the filename and start adding content according to the rules described below.","title":"Step 5: Create MkDocs Configuration (mkdocs.yml)"},{"location":"Documentation%20Setup/#customize-your-config-mkdocsyml","text":"As a result of editing, your config may have the following structure. # The name of your site, displayed in the page header site_name: Web-docs using MkDocs # The URL of your site after deployment (essential for correct link functionality) site_url: https://MkDocs-web-docs.github.io/how-to-create-web-docs/ # Specify an additional CSS file for custom styles extra_css: - extra.css # Navigation (site page structure) nav: - Creating a web manual using MkDocs: index.md # The main page of the site - Links: Links.md # Link to the Links page - Project Setup: Project Setup.md # Link to the Project Setup page - Documentation Setup: Documentation Setup.md # Link to the Documentation Setup page - Deploy and Customize: Deploy and Customize MkDocs.md # Link to the Deploy and Customize page # Site theme and localization theme: name: mkdocs # The theme being used (in this case, the standard MkDocs theme) locale: ru # Localization (Russian language) # Step 6: Create Documentation in Markdown Format You need to include index.md in your navigation.","title":"Customize your config (mkdocs.yml)"},{"location":"Documentation%20Setup/#basics-of-writing-text-in-markdown","text":"Markdown is a simple markup language for formatting text. It allows you to create structured text using simple symbols. Here are the main features: Headings Use the # symbol to create headings of different levels. The more # symbols, the lower the heading level. Example: ```markdown # Heading Level 1 ## Heading Level 2 ### Heading Level 3 Paragraphs and Line Breaks To separate paragraphs, leave a blank line. To force a line break, add two spaces at the end of a line. Example: This is the first paragraph. This is the second paragraph. And this is the second line without a paragraph. Text Formatting Bold: Wrap text in double asterisks ( ) or double underscores (__). Example:** **Bold text** __Bold text__ Italics: Wrap text in single asterisks ( ) or single underscores (_). Example: * *Italics* _Italics_ Strikethrough: Use double tildes (~~). Example: ~~Strikethrough text~~ Lists Bulleted list: Use -, , or +. Example: * - Item 1 - Item 2 - Sub-item ``` * Numbered list: Use numbers with a period. **Example:** ```markdown 1. First 2. Second Links [Link text](URL) Images ![Image name](../image/1_structure_project.png) \u27a4 To add an image, you don\u2019t need to specify the path manually. Just drag the image from the left menu to the desired location, and PyCharm will automatically generate the path. \u27a4 PyCharm has three document display modes, including a preview with images. 7. Code * Inline code: Wrap the text in backticks (`). Example: `python -m venv .venv` Code block: Wrap the text in triple backticks (`````) followed by the language. Example: ```print(\"Hello, World!\")``` Tables Create tables using vertical bars (|) and hyphens (-). Example: | Heading 1 | Heading 2 | |-----------|-----------| | Text 1 | Text 2 | Note Use the > symbol to create notes. Example: > Note: Always test your code before deploying.","title":"Basics of writing text in Markdown"},{"location":"Documentation%20Setup/#more-about-numbering","text":"To ensure that mixed numbering is displayed correctly in MkDocs (or any Markdown document), it is important to use proper indentation and formatting. Here is an example of how to do it: !Indentation must be a multiple of 4 spaces. First item Unnumbered item inside a sub-item Another unnumbered item Second item Unnumbered item in main list Nested unnumbered item Deeper nested unnumbered item In MkDocs , as in Markdown , the correct display of nested numbering depends on the theme used and the way Markdown is interpreted. For standard Markdown, automatic support for \"sub-items with nested numbers\" (e.g. 2.1.1) may not be available, since Markdown does not support multi-part numbering by default. Later we will look at working with other, more flexible, themes. In some cases, the numbering may be broken. To fix this, I use HTML to continue the numbering: <ol start=\"5\"> <li>Links:</li> <a href=\"URL\">Link text</a> </ol>","title":"More about numbering"},{"location":"Documentation%20Setup/#step-7-complete-the-structure-of-your-project","text":"In the source folder, create the file index.md \u2014 the text of this document will be displayed on the home page of the site. Create the .gitignore file in the root of the project and write site in it \u2014 this will prevent Git from tracking the compiled files. \u27a4 The \"site\" folder will be automatically generated during deployment. Now, your project structure looks like this: Web-docs/ # Parent directory \u251c\u2500\u2500 .venv/ # Virtual environment \u251c\u2500\u2500 docs/ # Documentation source files \u251c\u2500\u2500 index.md/ # Home page \u251c\u2500\u2500 image/ # Documentation images \u251c\u2500\u2500 mkdocs.yml # MkDocs configuration file \u251c\u2500\u2500 .gitignore # Ignored files","title":"Step 7: Complete the Structure of Your Project"},{"location":"Links/","text":"Links This guide is based on the official MkDocs documentation \u2013 visit the https://www.mkdocs.org/ . If you have any questions, feel free to contact me via email: tedkuzmina@gmail.com. Please leave your feedback or suggestions about this document My LinkedInn . You can view the result of our work Our site . The source files are available My GitHub .","title":"Links"},{"location":"Links/#links","text":"This guide is based on the official MkDocs documentation \u2013 visit the https://www.mkdocs.org/ . If you have any questions, feel free to contact me via email: tedkuzmina@gmail.com. Please leave your feedback or suggestions about this document My LinkedInn . You can view the result of our work Our site . The source files are available My GitHub .","title":"Links"},{"location":"Project%20Setup/","text":"Step 1: Creating an organization in GitHub Create an organization: Log in to GitHub. Select the \"Create an organization\" menu. Select a pricing plan: Choose an appropriate pricing plan for your organization. Set up the organization: Fill in the necessary settings. Confirm the creation. \u27a4 The URL of your future site will be generated from the \"Organization name\" field and will follow this structure: https://[site-name].github.io/. Step 2: Create a new repository Create a repository: \u27a4 Create a repository on behalf of the organization. \u27a4 Select public/empty (the repository should not contain, for example, README.md). Clone the repository in PyCharm: Copy the repository URL (either HTTPS or SSH). In PyCharm, select \"Clone Repository\" or \"Get from VCS\". Copy the URL from your organization's page in GitHub (I choose SSH). Paste the URL and click \"Clone\". \u27a4 If you choose SSH, make sure you have SSH settings configured. We'll discuss why this is more convenient in later posts. Click \u201cTrust Project\u201d in the window that opens. Step 3: Setting up a virtual environment Create a virtual environment: Run the following command in the PyCharm terminal: python -m venv .venv \u27a4 If you get a \"command not found\" error, check your installed Python version and adjust the command accordingly. Your Python version: For example, I used: python3.13 -m venv .venv \u27a4 You can see the PyCharm version in the lower right corner of the screen. \u27a4 Setting up a virtual environment helps avoid conflicts between packages in different projects. \u27a4 It's not possible to install two or more different versions of the same package in one environment. The solution is to create another environment. Activate the environment: In the PyCharm terminal, run: source .venv/bin/activate Step 4: Install MkDocs and the necessary packages Install via pip: Run the following in the terminal: pip install mkdocs mkdocs-material \u27a4 If needed, specify the version with: pip3.13 install mkdocs mkdocs-material Alternatively, use the \"Packages\" toolbar in PyCharm.","title":"Project Setup"},{"location":"Project%20Setup/#step-1-creating-an-organization-in-github","text":"Create an organization: Log in to GitHub. Select the \"Create an organization\" menu. Select a pricing plan: Choose an appropriate pricing plan for your organization. Set up the organization: Fill in the necessary settings. Confirm the creation. \u27a4 The URL of your future site will be generated from the \"Organization name\" field and will follow this structure: https://[site-name].github.io/.","title":"Step 1: Creating an organization in GitHub"},{"location":"Project%20Setup/#step-2-create-a-new-repository","text":"Create a repository: \u27a4 Create a repository on behalf of the organization. \u27a4 Select public/empty (the repository should not contain, for example, README.md). Clone the repository in PyCharm: Copy the repository URL (either HTTPS or SSH). In PyCharm, select \"Clone Repository\" or \"Get from VCS\". Copy the URL from your organization's page in GitHub (I choose SSH). Paste the URL and click \"Clone\". \u27a4 If you choose SSH, make sure you have SSH settings configured. We'll discuss why this is more convenient in later posts. Click \u201cTrust Project\u201d in the window that opens.","title":"Step 2: Create a new repository"},{"location":"Project%20Setup/#step-3-setting-up-a-virtual-environment","text":"Create a virtual environment: Run the following command in the PyCharm terminal: python -m venv .venv \u27a4 If you get a \"command not found\" error, check your installed Python version and adjust the command accordingly. Your Python version: For example, I used: python3.13 -m venv .venv \u27a4 You can see the PyCharm version in the lower right corner of the screen. \u27a4 Setting up a virtual environment helps avoid conflicts between packages in different projects. \u27a4 It's not possible to install two or more different versions of the same package in one environment. The solution is to create another environment. Activate the environment: In the PyCharm terminal, run: source .venv/bin/activate","title":"Step 3: Setting up a virtual environment"},{"location":"Project%20Setup/#step-4-install-mkdocs-and-the-necessary-packages","text":"Install via pip: Run the following in the terminal: pip install mkdocs mkdocs-material \u27a4 If needed, specify the version with: pip3.13 install mkdocs mkdocs-material Alternatively, use the \"Packages\" toolbar in PyCharm.","title":"Step 4: Install MkDocs and the necessary packages"}]}